name: CD Workflow

on:
  push:
    branches:
      - main
    # Triggers deployment on pushes to the main branch.

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: ap-southeast-1
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        # Checks out the repository code.

      - name: Setup AWS Credentials Using OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::927041702050:role/fullaccess
          aws-region: ${{ env.AWS_REGION }}
        # Configures AWS credentials using OIDC to securely assume an IAM role.

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        # Sets up Docker Buildx for building images.

      - name: Authenticate Docker with Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin 927041702050.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        # Authenticates Docker to Amazon ECR using the AWS CLI.

      - name: Determine Latest Version and Increment
        id: version
        run: |
          # Get all image tags from ECR.
          tags=$(aws ecr list-images --repository-name uat/jobboard --query 'imageIds[*].imageTag' --output text | tr '\t' '\n')
          
          # Filter tags matching the pattern (auth_vX.Y.Z) and sort them.
          latest_version=$(echo "$tags" | grep -E '^auth_v[0-9]+\.[0-9]+\.[0-9]+$' | sed 's/^auth_//' | sort -V | tail -n 1)
          
          if [ -z "$latest_version" ]; then
            new_version="v1.0.0"
          else
            # Remove the 'v' prefix and split into parts.
            IFS='.' read -r major minor patch <<< "${latest_version#v}"
            
            # Bump version based on commit message keywords.
            if git log -1 --pretty=%B | grep -q 'breaking'; then
              major=$((major + 1))
              minor=0
              patch=0
            elif git log -1 --pretty=%B | grep -q 'feat'; then
              minor=$((minor + 1))
              patch=0
            else
              patch=$((patch + 1))
            fi
            
            new_version="v$major.$minor.$patch"
          fi
          
          echo "New Version: $new_version"
          echo "version=$new_version" >> $GITHUB_ENV
        # Determines the latest version from ECR and increments it based on commit messages.

      - name: Build Docker Image
        run: docker build -t 927041702050.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/uat/jobboard:auth_${{ env.version }} .
        # Builds the Docker image with a new version tag.

      - name: Push Docker Image to Amazon ECR
        run: docker push 927041702050.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/uat/jobboard:auth_${{ env.version }}
        # Pushes the scanned Docker image to Amazon ECR.

      - name: Get Current Task Definition JSON
        run: |
          aws ecs describe-task-definition --task-definition ecs-uat-jb-auth-service-td \
            --query 'taskDefinition' > current-task-definition.json
        # Retrieves the current ECS task definition.

      - name: Update Container Image in Task Definition
        run: |
          jq --arg IMAGE "927041702050.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/uat/jobboard:auth_${{ env.version }}" '
            .containerDefinitions[0].image = $IMAGE |
            del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)
          ' current-task-definition.json > new-task-definition.json
        # Updates the container image in the task definition JSON with the new image.

      - name: Register New Task Definition
        run: |
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV
        # Registers the new task definition with ECS and stores its ARN.

      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster uat-ecs --service uat-jb-auth-service --force-new-deployment --task-definition $NEW_TASK_DEF_ARN
        # Updates the ECS service to deploy the new task definition.
